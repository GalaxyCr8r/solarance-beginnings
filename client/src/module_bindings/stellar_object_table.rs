// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{
	self as __sdk,
	__lib,
	__sats,
	__ws,
};
use super::stellar_object_type::StellarObject;
use super::stellar_object_kinds_type::StellarObjectKinds;

/// Table handle for the table `stellar_object`.
///
/// Obtain a handle from the [`StellarObjectTableAccess::stellar_object`] method on [`super::RemoteTables`],
/// like `ctx.db.stellar_object()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.stellar_object().on_insert(...)`.
pub struct StellarObjectTableHandle<'ctx> {
    imp: __sdk::TableHandle<StellarObject>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `stellar_object`.
///
/// Implemented for [`super::RemoteTables`].
pub trait StellarObjectTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`StellarObjectTableHandle`], which mediates access to the table `stellar_object`.
    fn stellar_object(&self) -> StellarObjectTableHandle<'_>;
}

impl StellarObjectTableAccess for super::RemoteTables {
    fn stellar_object(&self) -> StellarObjectTableHandle<'_> {
        StellarObjectTableHandle {
            imp: self.imp.get_table::<StellarObject>("stellar_object"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct StellarObjectInsertCallbackId(__sdk::CallbackId);
pub struct StellarObjectDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for StellarObjectTableHandle<'ctx> {
    type Row = StellarObject;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 { self.imp.count() }
    fn iter(&self) -> impl Iterator<Item = StellarObject> + '_ { self.imp.iter() }

    type InsertCallbackId = StellarObjectInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> StellarObjectInsertCallbackId {
        StellarObjectInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: StellarObjectInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = StellarObjectDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> StellarObjectDeleteCallbackId {
        StellarObjectDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: StellarObjectDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {

        let _table = client_cache.get_or_make_table::<StellarObject>("stellar_object");
    _table.add_unique_constraint::<u64>("id", |row| &row.id);
}
pub struct StellarObjectUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for StellarObjectTableHandle<'ctx> {
    type UpdateCallbackId = StellarObjectUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> StellarObjectUpdateCallbackId {
        StellarObjectUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: StellarObjectUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}


#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<StellarObject>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse(
            "TableUpdate<StellarObject>",
            "TableUpdate",
        ).with_cause(e).into()
    })
}

        /// Access to the `id` unique index on the table `stellar_object`,
        /// which allows point queries on the field of the same name
        /// via the [`StellarObjectIdUnique::find`] method.
        ///
        /// Users are encouraged not to explicitly reference this type,
        /// but to directly chain method calls,
        /// like `ctx.db.stellar_object().id().find(...)`.
        pub struct StellarObjectIdUnique<'ctx> {
            imp: __sdk::UniqueConstraintHandle<StellarObject, u64>,
            phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
        }

        impl<'ctx> StellarObjectTableHandle<'ctx> {
            /// Get a handle on the `id` unique index on the table `stellar_object`.
            pub fn id(&self) -> StellarObjectIdUnique<'ctx> {
                StellarObjectIdUnique {
                    imp: self.imp.get_unique_constraint::<u64>("id"),
                    phantom: std::marker::PhantomData,
                }
            }
        }

        impl<'ctx> StellarObjectIdUnique<'ctx> {
            /// Find the subscribed row whose `id` column value is equal to `col_val`,
            /// if such a row is present in the client cache.
            pub fn find(&self, col_val: &u64) -> Option<StellarObject> {
                self.imp.find(col_val)
            }
        }
        