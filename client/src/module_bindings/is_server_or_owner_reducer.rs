// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{
	self as __sdk,
	__lib,
	__sats,
	__ws,
};


#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct IsServerOrOwnerArgs {
    }

impl From<IsServerOrOwnerArgs> for super::Reducer {
    fn from(args: IsServerOrOwnerArgs) -> Self {
        Self::IsServerOrOwner
}
}

impl __sdk::InModule for IsServerOrOwnerArgs {
    type Module = super::RemoteModule;
}

pub struct IsServerOrOwnerCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `is_server_or_owner`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait is_server_or_owner {
    /// Request that the remote module invoke the reducer `is_server_or_owner` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_is_server_or_owner`] callbacks.
    fn is_server_or_owner(&self, ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `is_server_or_owner`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`IsServerOrOwnerCallbackId`] can be passed to [`Self::remove_on_is_server_or_owner`]
    /// to cancel the callback.
    fn on_is_server_or_owner(&self, callback: impl FnMut(&super::ReducerEventContext, ) + Send + 'static) -> IsServerOrOwnerCallbackId;
    /// Cancel a callback previously registered by [`Self::on_is_server_or_owner`],
    /// causing it not to run in the future.
    fn remove_on_is_server_or_owner(&self, callback: IsServerOrOwnerCallbackId);
}

impl is_server_or_owner for super::RemoteReducers {
    fn is_server_or_owner(&self, ) -> __sdk::Result<()> {
        self.imp.call_reducer("is_server_or_owner", IsServerOrOwnerArgs {  })
    }
    fn on_is_server_or_owner(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, ) + Send + 'static,
    ) -> IsServerOrOwnerCallbackId {
        IsServerOrOwnerCallbackId(self.imp.on_reducer(
            "is_server_or_owner",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event: __sdk::ReducerEvent {
                        reducer: super::Reducer::IsServerOrOwner {
                            
                        },
                        ..
                    },
                    ..
                } = ctx else { unreachable!() };
                callback(ctx, )
            }),
        ))
    }
    fn remove_on_is_server_or_owner(&self, callback: IsServerOrOwnerCallbackId) {
        self.imp.remove_on_reducer("is_server_or_owner", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `is_server_or_owner`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_is_server_or_owner {
    /// Set the call-reducer flags for the reducer `is_server_or_owner` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn is_server_or_owner(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_is_server_or_owner for super::SetReducerFlags {
    fn is_server_or_owner(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("is_server_or_owner", flags);
    }
}

