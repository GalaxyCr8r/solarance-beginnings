// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::stellar_object_controller_turn_left_type::StellarObjectControllerTurnLeft;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `sobj_turn_left_controller`.
///
/// Obtain a handle from the [`SobjTurnLeftControllerTableAccess::sobj_turn_left_controller`] method on [`super::RemoteTables`],
/// like `ctx.db.sobj_turn_left_controller()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.sobj_turn_left_controller().on_insert(...)`.
pub struct SobjTurnLeftControllerTableHandle<'ctx> {
    imp: __sdk::TableHandle<StellarObjectControllerTurnLeft>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `sobj_turn_left_controller`.
///
/// Implemented for [`super::RemoteTables`].
pub trait SobjTurnLeftControllerTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`SobjTurnLeftControllerTableHandle`], which mediates access to the table `sobj_turn_left_controller`.
    fn sobj_turn_left_controller(&self) -> SobjTurnLeftControllerTableHandle<'_>;
}

impl SobjTurnLeftControllerTableAccess for super::RemoteTables {
    fn sobj_turn_left_controller(&self) -> SobjTurnLeftControllerTableHandle<'_> {
        SobjTurnLeftControllerTableHandle {
            imp: self
                .imp
                .get_table::<StellarObjectControllerTurnLeft>("sobj_turn_left_controller"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct SobjTurnLeftControllerInsertCallbackId(__sdk::CallbackId);
pub struct SobjTurnLeftControllerDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for SobjTurnLeftControllerTableHandle<'ctx> {
    type Row = StellarObjectControllerTurnLeft;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = StellarObjectControllerTurnLeft> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = SobjTurnLeftControllerInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> SobjTurnLeftControllerInsertCallbackId {
        SobjTurnLeftControllerInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: SobjTurnLeftControllerInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = SobjTurnLeftControllerDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> SobjTurnLeftControllerDeleteCallbackId {
        SobjTurnLeftControllerDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: SobjTurnLeftControllerDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache
        .get_or_make_table::<StellarObjectControllerTurnLeft>("sobj_turn_left_controller");
    _table.add_unique_constraint::<u64>("sobj_id", |row| &row.sobj_id);
}
pub struct SobjTurnLeftControllerUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for SobjTurnLeftControllerTableHandle<'ctx> {
    type UpdateCallbackId = SobjTurnLeftControllerUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> SobjTurnLeftControllerUpdateCallbackId {
        SobjTurnLeftControllerUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: SobjTurnLeftControllerUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<StellarObjectControllerTurnLeft>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse(
            "TableUpdate<StellarObjectControllerTurnLeft>",
            "TableUpdate",
        )
        .with_cause(e)
        .into()
    })
}

/// Access to the `sobj_id` unique index on the table `sobj_turn_left_controller`,
/// which allows point queries on the field of the same name
/// via the [`SobjTurnLeftControllerSobjIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.sobj_turn_left_controller().sobj_id().find(...)`.
pub struct SobjTurnLeftControllerSobjIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<StellarObjectControllerTurnLeft, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> SobjTurnLeftControllerTableHandle<'ctx> {
    /// Get a handle on the `sobj_id` unique index on the table `sobj_turn_left_controller`.
    pub fn sobj_id(&self) -> SobjTurnLeftControllerSobjIdUnique<'ctx> {
        SobjTurnLeftControllerSobjIdUnique {
            imp: self.imp.get_unique_constraint::<u64>("sobj_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> SobjTurnLeftControllerSobjIdUnique<'ctx> {
    /// Find the subscribed row whose `sobj_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<StellarObjectControllerTurnLeft> {
        self.imp.find(col_val)
    }
}
