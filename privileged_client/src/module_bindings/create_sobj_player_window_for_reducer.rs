// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

use super::stellar_object_id_type::StellarObjectId;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct CreateSobjPlayerWindowForArgs {
    pub identity: __sdk::Identity,
    pub sobj_id: StellarObjectId,
}

impl From<CreateSobjPlayerWindowForArgs> for super::Reducer {
    fn from(args: CreateSobjPlayerWindowForArgs) -> Self {
        Self::CreateSobjPlayerWindowFor {
            identity: args.identity,
            sobj_id: args.sobj_id,
        }
    }
}

impl __sdk::InModule for CreateSobjPlayerWindowForArgs {
    type Module = super::RemoteModule;
}

pub struct CreateSobjPlayerWindowForCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `create_sobj_player_window_for`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait create_sobj_player_window_for {
    /// Request that the remote module invoke the reducer `create_sobj_player_window_for` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_create_sobj_player_window_for`] callbacks.
    fn create_sobj_player_window_for(
        &self,
        identity: __sdk::Identity,
        sobj_id: StellarObjectId,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `create_sobj_player_window_for`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`CreateSobjPlayerWindowForCallbackId`] can be passed to [`Self::remove_on_create_sobj_player_window_for`]
    /// to cancel the callback.
    fn on_create_sobj_player_window_for(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &StellarObjectId)
            + Send
            + 'static,
    ) -> CreateSobjPlayerWindowForCallbackId;
    /// Cancel a callback previously registered by [`Self::on_create_sobj_player_window_for`],
    /// causing it not to run in the future.
    fn remove_on_create_sobj_player_window_for(
        &self,
        callback: CreateSobjPlayerWindowForCallbackId,
    );
}

impl create_sobj_player_window_for for super::RemoteReducers {
    fn create_sobj_player_window_for(
        &self,
        identity: __sdk::Identity,
        sobj_id: StellarObjectId,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "create_sobj_player_window_for",
            CreateSobjPlayerWindowForArgs { identity, sobj_id },
        )
    }
    fn on_create_sobj_player_window_for(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &StellarObjectId)
            + Send
            + 'static,
    ) -> CreateSobjPlayerWindowForCallbackId {
        CreateSobjPlayerWindowForCallbackId(
            self.imp.on_reducer(
                "create_sobj_player_window_for",
                Box::new(move |ctx: &super::ReducerEventContext| {
                    let super::ReducerEventContext {
                        event:
                            __sdk::ReducerEvent {
                                reducer:
                                    super::Reducer::CreateSobjPlayerWindowFor { identity, sobj_id },
                                ..
                            },
                        ..
                    } = ctx
                    else {
                        unreachable!()
                    };
                    callback(ctx, identity, sobj_id)
                }),
            ),
        )
    }
    fn remove_on_create_sobj_player_window_for(
        &self,
        callback: CreateSobjPlayerWindowForCallbackId,
    ) {
        self.imp
            .remove_on_reducer("create_sobj_player_window_for", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `create_sobj_player_window_for`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_create_sobj_player_window_for {
    /// Set the call-reducer flags for the reducer `create_sobj_player_window_for` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn create_sobj_player_window_for(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_create_sobj_player_window_for for super::SetReducerFlags {
    fn create_sobj_player_window_for(&self, flags: __ws::CallReducerFlags) {
        self.imp
            .set_call_reducer_flags("create_sobj_player_window_for", flags);
    }
}
