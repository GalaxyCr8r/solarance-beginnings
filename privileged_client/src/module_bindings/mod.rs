// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod asteroid_sector_table;
pub mod asteroid_sector_type;
pub mod asteroid_sector_upkeep_reducer;
pub mod asteroid_sector_upkeep_timer_table;
pub mod asteroid_sector_upkeep_timer_type;
pub mod asteroid_table;
pub mod asteroid_type;
pub mod cargo_crate_table;
pub mod cargo_crate_type;
pub mod create_jumpgate_in_sector_reducer;
pub mod create_player_controlled_ship_reducer;
pub mod create_sobj_player_window_for_reducer;
pub mod create_sobj_random_reducer;
pub mod create_stellar_object_reducer;
pub mod create_turn_left_controller_for_reducer;
pub mod current_action_type;
pub mod equipment_slot_type_type;
pub mod faction_chat_message_table;
pub mod faction_chat_message_type;
pub mod faction_definition_table;
pub mod faction_definition_type;
pub mod global_chat_message_table;
pub mod global_chat_message_type;
pub mod global_config_table;
pub mod global_config_type;
pub mod grant_privilage_to_client_reducer;
pub mod identity_connected_reducer;
pub mod identity_disconnected_reducer;
pub mod is_server_or_owner_reducer;
pub mod item_category_type;
pub mod item_definition_table;
pub mod item_definition_type;
pub mod item_metadata_type;
pub mod jump_gate_table;
pub mod jump_gate_type;
pub mod move_stellar_objects_reducer;
pub mod player_controller_table;
pub mod player_controller_timer_table;
pub mod player_controller_timer_type;
pub mod player_controller_type;
pub mod player_controller_upkeep_reducer;
pub mod player_faction_standing_table;
pub mod player_faction_standing_type;
pub mod player_table;
pub mod player_type;
pub mod player_windows_timer_table;
pub mod player_windows_timer_type;
pub mod privileged_client_identity_type;
pub mod privileged_client_table;
pub mod privileged_client_type;
pub mod recalculate_player_windows_reducer;
pub mod recalculate_sobj_transforms_reducer;
pub mod revoke_privilage_from_client_reducer;
pub mod sector_chat_message_table;
pub mod sector_chat_message_type;
pub mod sector_id_type;
pub mod sector_table;
pub mod sector_type;
pub mod sector_upkeep_reducer;
pub mod sector_upkeep_timer_table;
pub mod sector_upkeep_timer_type;
pub mod send_global_chat_reducer;
pub mod send_sector_chat_reducer;
pub mod server_only_reducer;
pub mod ship_add_cargo_timer_reducer_reducer;
pub mod ship_add_cargo_timer_table;
pub mod ship_add_cargo_timer_type;
pub mod ship_cargo_item_table;
pub mod ship_cargo_item_type;
pub mod ship_class_type;
pub mod ship_energy_and_shield_timer_reducer_reducer;
pub mod ship_energy_and_shield_timer_table;
pub mod ship_energy_and_shield_timer_type;
pub mod ship_equipment_slot_table;
pub mod ship_equipment_slot_type;
pub mod ship_instance_table;
pub mod ship_instance_type;
pub mod ship_mining_timer_reducer_reducer;
pub mod ship_mining_timer_table;
pub mod ship_mining_timer_type;
pub mod ship_object_table;
pub mod ship_object_type;
pub mod ship_type_definition_table;
pub mod ship_type_definition_type;
pub mod sobj_hi_res_transform_table;
pub mod sobj_internal_transform_table;
pub mod sobj_low_res_transform_table;
pub mod sobj_player_window_table;
pub mod sobj_transform_timer_table;
pub mod sobj_turn_left_controller_table;
pub mod sobj_velocity_table;
pub mod station_kind_type;
pub mod station_table;
pub mod station_type;
pub mod stellar_object_controller_turn_left_type;
pub mod stellar_object_id_type;
pub mod stellar_object_kinds_type;
pub mod stellar_object_player_window_type;
pub mod stellar_object_table;
pub mod stellar_object_transform_hi_res_type;
pub mod stellar_object_transform_internal_type;
pub mod stellar_object_transform_low_res_type;
pub mod stellar_object_type;
pub mod stellar_object_velocity_type;
pub mod transforms_timer_type;
pub mod try_server_only_reducer;
pub mod update_player_controller_reducer;
pub mod vec_2_type;

pub use asteroid_sector_table::*;
pub use asteroid_sector_type::AsteroidSector;
pub use asteroid_sector_upkeep_reducer::{
    asteroid_sector_upkeep, set_flags_for_asteroid_sector_upkeep, AsteroidSectorUpkeepCallbackId,
};
pub use asteroid_sector_upkeep_timer_table::*;
pub use asteroid_sector_upkeep_timer_type::AsteroidSectorUpkeepTimer;
pub use asteroid_table::*;
pub use asteroid_type::Asteroid;
pub use cargo_crate_table::*;
pub use cargo_crate_type::CargoCrate;
pub use create_jumpgate_in_sector_reducer::{
    create_jumpgate_in_sector, set_flags_for_create_jumpgate_in_sector,
    CreateJumpgateInSectorCallbackId,
};
pub use create_player_controlled_ship_reducer::{
    create_player_controlled_ship, set_flags_for_create_player_controlled_ship,
    CreatePlayerControlledShipCallbackId,
};
pub use create_sobj_player_window_for_reducer::{
    create_sobj_player_window_for, set_flags_for_create_sobj_player_window_for,
    CreateSobjPlayerWindowForCallbackId,
};
pub use create_sobj_random_reducer::{
    create_sobj_random, set_flags_for_create_sobj_random, CreateSobjRandomCallbackId,
};
pub use create_stellar_object_reducer::{
    create_stellar_object, set_flags_for_create_stellar_object, CreateStellarObjectCallbackId,
};
pub use create_turn_left_controller_for_reducer::{
    create_turn_left_controller_for, set_flags_for_create_turn_left_controller_for,
    CreateTurnLeftControllerForCallbackId,
};
pub use current_action_type::CurrentAction;
pub use equipment_slot_type_type::EquipmentSlotType;
pub use faction_chat_message_table::*;
pub use faction_chat_message_type::FactionChatMessage;
pub use faction_definition_table::*;
pub use faction_definition_type::FactionDefinition;
pub use global_chat_message_table::*;
pub use global_chat_message_type::GlobalChatMessage;
pub use global_config_table::*;
pub use global_config_type::GlobalConfig;
pub use grant_privilage_to_client_reducer::{
    grant_privilage_to_client, set_flags_for_grant_privilage_to_client,
    GrantPrivilageToClientCallbackId,
};
pub use identity_connected_reducer::{
    identity_connected, set_flags_for_identity_connected, IdentityConnectedCallbackId,
};
pub use identity_disconnected_reducer::{
    identity_disconnected, set_flags_for_identity_disconnected, IdentityDisconnectedCallbackId,
};
pub use is_server_or_owner_reducer::{
    is_server_or_owner, set_flags_for_is_server_or_owner, IsServerOrOwnerCallbackId,
};
pub use item_category_type::ItemCategory;
pub use item_definition_table::*;
pub use item_definition_type::ItemDefinition;
pub use item_metadata_type::ItemMetadata;
pub use jump_gate_table::*;
pub use jump_gate_type::JumpGate;
pub use move_stellar_objects_reducer::{
    move_stellar_objects, set_flags_for_move_stellar_objects, MoveStellarObjectsCallbackId,
};
pub use player_controller_table::*;
pub use player_controller_timer_table::*;
pub use player_controller_timer_type::PlayerControllerTimer;
pub use player_controller_type::PlayerController;
pub use player_controller_upkeep_reducer::{
    player_controller_upkeep, set_flags_for_player_controller_upkeep,
    PlayerControllerUpkeepCallbackId,
};
pub use player_faction_standing_table::*;
pub use player_faction_standing_type::PlayerFactionStanding;
pub use player_table::*;
pub use player_type::Player;
pub use player_windows_timer_table::*;
pub use player_windows_timer_type::PlayerWindowsTimer;
pub use privileged_client_identity_type::PrivilegedClientIdentity;
pub use privileged_client_table::*;
pub use privileged_client_type::PrivilegedClient;
pub use recalculate_player_windows_reducer::{
    recalculate_player_windows, set_flags_for_recalculate_player_windows,
    RecalculatePlayerWindowsCallbackId,
};
pub use recalculate_sobj_transforms_reducer::{
    recalculate_sobj_transforms, set_flags_for_recalculate_sobj_transforms,
    RecalculateSobjTransformsCallbackId,
};
pub use revoke_privilage_from_client_reducer::{
    revoke_privilage_from_client, set_flags_for_revoke_privilage_from_client,
    RevokePrivilageFromClientCallbackId,
};
pub use sector_chat_message_table::*;
pub use sector_chat_message_type::SectorChatMessage;
pub use sector_id_type::SectorId;
pub use sector_table::*;
pub use sector_type::Sector;
pub use sector_upkeep_reducer::{
    sector_upkeep, set_flags_for_sector_upkeep, SectorUpkeepCallbackId,
};
pub use sector_upkeep_timer_table::*;
pub use sector_upkeep_timer_type::SectorUpkeepTimer;
pub use send_global_chat_reducer::{
    send_global_chat, set_flags_for_send_global_chat, SendGlobalChatCallbackId,
};
pub use send_sector_chat_reducer::{
    send_sector_chat, set_flags_for_send_sector_chat, SendSectorChatCallbackId,
};
pub use server_only_reducer::{server_only, set_flags_for_server_only, ServerOnlyCallbackId};
pub use ship_add_cargo_timer_reducer_reducer::{
    set_flags_for_ship_add_cargo_timer_reducer, ship_add_cargo_timer_reducer,
    ShipAddCargoTimerReducerCallbackId,
};
pub use ship_add_cargo_timer_table::*;
pub use ship_add_cargo_timer_type::ShipAddCargoTimer;
pub use ship_cargo_item_table::*;
pub use ship_cargo_item_type::ShipCargoItem;
pub use ship_class_type::ShipClass;
pub use ship_energy_and_shield_timer_reducer_reducer::{
    set_flags_for_ship_energy_and_shield_timer_reducer, ship_energy_and_shield_timer_reducer,
    ShipEnergyAndShieldTimerReducerCallbackId,
};
pub use ship_energy_and_shield_timer_table::*;
pub use ship_energy_and_shield_timer_type::ShipEnergyAndShieldTimer;
pub use ship_equipment_slot_table::*;
pub use ship_equipment_slot_type::ShipEquipmentSlot;
pub use ship_instance_table::*;
pub use ship_instance_type::ShipInstance;
pub use ship_mining_timer_reducer_reducer::{
    set_flags_for_ship_mining_timer_reducer, ship_mining_timer_reducer,
    ShipMiningTimerReducerCallbackId,
};
pub use ship_mining_timer_table::*;
pub use ship_mining_timer_type::ShipMiningTimer;
pub use ship_object_table::*;
pub use ship_object_type::ShipObject;
pub use ship_type_definition_table::*;
pub use ship_type_definition_type::ShipTypeDefinition;
pub use sobj_hi_res_transform_table::*;
pub use sobj_internal_transform_table::*;
pub use sobj_low_res_transform_table::*;
pub use sobj_player_window_table::*;
pub use sobj_transform_timer_table::*;
pub use sobj_turn_left_controller_table::*;
pub use sobj_velocity_table::*;
pub use station_kind_type::StationKind;
pub use station_table::*;
pub use station_type::Station;
pub use stellar_object_controller_turn_left_type::StellarObjectControllerTurnLeft;
pub use stellar_object_id_type::StellarObjectId;
pub use stellar_object_kinds_type::StellarObjectKinds;
pub use stellar_object_player_window_type::StellarObjectPlayerWindow;
pub use stellar_object_table::*;
pub use stellar_object_transform_hi_res_type::StellarObjectTransformHiRes;
pub use stellar_object_transform_internal_type::StellarObjectTransformInternal;
pub use stellar_object_transform_low_res_type::StellarObjectTransformLowRes;
pub use stellar_object_type::StellarObject;
pub use stellar_object_velocity_type::StellarObjectVelocity;
pub use transforms_timer_type::TransformsTimer;
pub use try_server_only_reducer::{
    set_flags_for_try_server_only, try_server_only, TryServerOnlyCallbackId,
};
pub use update_player_controller_reducer::{
    set_flags_for_update_player_controller, update_player_controller,
    UpdatePlayerControllerCallbackId,
};
pub use vec_2_type::Vec2;

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    AsteroidSectorUpkeep {
        timer: AsteroidSectorUpkeepTimer,
    },
    CreateJumpgateInSector {
        sector_id: u64,
        x: f32,
        y: f32,
        target_sector_id: u64,
        t_x: f32,
        t_y: f32,
    },
    CreatePlayerControlledShip {
        identity: __sdk::Identity,
        username: String,
    },
    CreateSobjPlayerWindowFor {
        identity: __sdk::Identity,
        sobj_id: StellarObjectId,
    },
    CreateSobjRandom {
        sector_id: u64,
    },
    CreateStellarObject {
        kind: StellarObjectKinds,
        sector_id: SectorId,
        transform: StellarObjectTransformInternal,
    },
    CreateTurnLeftControllerFor {
        sobj_id: StellarObjectId,
    },
    GrantPrivilageToClient {
        identity: __sdk::Identity,
        description: String,
        privilage: u32,
    },
    IdentityConnected,
    IdentityDisconnected,
    IsServerOrOwner {
        sobj_id: StellarObjectId,
    },
    MoveStellarObjects,
    PlayerControllerUpkeep {
        timer: PlayerControllerTimer,
    },
    RecalculatePlayerWindows {
        timer: PlayerWindowsTimer,
    },
    RecalculateSobjTransforms {
        timer: TransformsTimer,
    },
    RevokePrivilageFromClient {
        client_identity: PrivilegedClientIdentity,
    },
    SectorUpkeep {
        timer: SectorUpkeepTimer,
    },
    SendGlobalChat {
        chat_message: String,
    },
    SendSectorChat {
        chat_message: String,
        sector_id: u64,
    },
    ServerOnly,
    ShipAddCargoTimerReducer {
        timer: ShipAddCargoTimer,
    },
    ShipEnergyAndShieldTimerReducer {
        timer: ShipEnergyAndShieldTimer,
    },
    ShipMiningTimerReducer {
        timer: ShipMiningTimer,
    },
    TryServerOnly,
    UpdatePlayerController {
        controller: PlayerController,
    },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::AsteroidSectorUpkeep { .. } => "asteroid_sector_upkeep",
            Reducer::CreateJumpgateInSector { .. } => "create_jumpgate_in_sector",
            Reducer::CreatePlayerControlledShip { .. } => "create_player_controlled_ship",
            Reducer::CreateSobjPlayerWindowFor { .. } => "create_sobj_player_window_for",
            Reducer::CreateSobjRandom { .. } => "create_sobj_random",
            Reducer::CreateStellarObject { .. } => "create_stellar_object",
            Reducer::CreateTurnLeftControllerFor { .. } => "create_turn_left_controller_for",
            Reducer::GrantPrivilageToClient { .. } => "grant_privilage_to_client",
            Reducer::IdentityConnected => "identity_connected",
            Reducer::IdentityDisconnected => "identity_disconnected",
            Reducer::IsServerOrOwner { .. } => "is_server_or_owner",
            Reducer::MoveStellarObjects => "move_stellar_objects",
            Reducer::PlayerControllerUpkeep { .. } => "player_controller_upkeep",
            Reducer::RecalculatePlayerWindows { .. } => "recalculate_player_windows",
            Reducer::RecalculateSobjTransforms { .. } => "recalculate_sobj_transforms",
            Reducer::RevokePrivilageFromClient { .. } => "revoke_privilage_from_client",
            Reducer::SectorUpkeep { .. } => "sector_upkeep",
            Reducer::SendGlobalChat { .. } => "send_global_chat",
            Reducer::SendSectorChat { .. } => "send_sector_chat",
            Reducer::ServerOnly => "server_only",
            Reducer::ShipAddCargoTimerReducer { .. } => "ship_add_cargo_timer_reducer",
            Reducer::ShipEnergyAndShieldTimerReducer { .. } => {
                "ship_energy_and_shield_timer_reducer"
            }
            Reducer::ShipMiningTimerReducer { .. } => "ship_mining_timer_reducer",
            Reducer::TryServerOnly => "try_server_only",
            Reducer::UpdatePlayerController { .. } => "update_player_controller",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "asteroid_sector_upkeep" => Ok(__sdk::parse_reducer_args::<
                asteroid_sector_upkeep_reducer::AsteroidSectorUpkeepArgs,
            >("asteroid_sector_upkeep", &value.args)?
            .into()),
            "create_jumpgate_in_sector" => {
                Ok(__sdk::parse_reducer_args::<
                    create_jumpgate_in_sector_reducer::CreateJumpgateInSectorArgs,
                >("create_jumpgate_in_sector", &value.args)?
                .into())
            }
            "create_player_controlled_ship" => {
                Ok(__sdk::parse_reducer_args::<
                    create_player_controlled_ship_reducer::CreatePlayerControlledShipArgs,
                >("create_player_controlled_ship", &value.args)?
                .into())
            }
            "create_sobj_player_window_for" => {
                Ok(__sdk::parse_reducer_args::<
                    create_sobj_player_window_for_reducer::CreateSobjPlayerWindowForArgs,
                >("create_sobj_player_window_for", &value.args)?
                .into())
            }
            "create_sobj_random" => Ok(__sdk::parse_reducer_args::<
                create_sobj_random_reducer::CreateSobjRandomArgs,
            >("create_sobj_random", &value.args)?
            .into()),
            "create_stellar_object" => Ok(__sdk::parse_reducer_args::<
                create_stellar_object_reducer::CreateStellarObjectArgs,
            >("create_stellar_object", &value.args)?
            .into()),
            "create_turn_left_controller_for" => {
                Ok(__sdk::parse_reducer_args::<
                    create_turn_left_controller_for_reducer::CreateTurnLeftControllerForArgs,
                >("create_turn_left_controller_for", &value.args)?
                .into())
            }
            "grant_privilage_to_client" => {
                Ok(__sdk::parse_reducer_args::<
                    grant_privilage_to_client_reducer::GrantPrivilageToClientArgs,
                >("grant_privilage_to_client", &value.args)?
                .into())
            }
            "identity_connected" => Ok(__sdk::parse_reducer_args::<
                identity_connected_reducer::IdentityConnectedArgs,
            >("identity_connected", &value.args)?
            .into()),
            "identity_disconnected" => Ok(__sdk::parse_reducer_args::<
                identity_disconnected_reducer::IdentityDisconnectedArgs,
            >("identity_disconnected", &value.args)?
            .into()),
            "is_server_or_owner" => Ok(__sdk::parse_reducer_args::<
                is_server_or_owner_reducer::IsServerOrOwnerArgs,
            >("is_server_or_owner", &value.args)?
            .into()),
            "move_stellar_objects" => Ok(__sdk::parse_reducer_args::<
                move_stellar_objects_reducer::MoveStellarObjectsArgs,
            >("move_stellar_objects", &value.args)?
            .into()),
            "player_controller_upkeep" => {
                Ok(__sdk::parse_reducer_args::<
                    player_controller_upkeep_reducer::PlayerControllerUpkeepArgs,
                >("player_controller_upkeep", &value.args)?
                .into())
            }
            "recalculate_player_windows" => {
                Ok(__sdk::parse_reducer_args::<
                    recalculate_player_windows_reducer::RecalculatePlayerWindowsArgs,
                >("recalculate_player_windows", &value.args)?
                .into())
            }
            "recalculate_sobj_transforms" => {
                Ok(__sdk::parse_reducer_args::<
                    recalculate_sobj_transforms_reducer::RecalculateSobjTransformsArgs,
                >("recalculate_sobj_transforms", &value.args)?
                .into())
            }
            "revoke_privilage_from_client" => {
                Ok(__sdk::parse_reducer_args::<
                    revoke_privilage_from_client_reducer::RevokePrivilageFromClientArgs,
                >("revoke_privilage_from_client", &value.args)?
                .into())
            }
            "sector_upkeep" => Ok(__sdk::parse_reducer_args::<
                sector_upkeep_reducer::SectorUpkeepArgs,
            >("sector_upkeep", &value.args)?
            .into()),
            "send_global_chat" => Ok(__sdk::parse_reducer_args::<
                send_global_chat_reducer::SendGlobalChatArgs,
            >("send_global_chat", &value.args)?
            .into()),
            "send_sector_chat" => Ok(__sdk::parse_reducer_args::<
                send_sector_chat_reducer::SendSectorChatArgs,
            >("send_sector_chat", &value.args)?
            .into()),
            "server_only" => Ok(
                __sdk::parse_reducer_args::<server_only_reducer::ServerOnlyArgs>(
                    "server_only",
                    &value.args,
                )?
                .into(),
            ),
            "ship_add_cargo_timer_reducer" => {
                Ok(__sdk::parse_reducer_args::<
                    ship_add_cargo_timer_reducer_reducer::ShipAddCargoTimerReducerArgs,
                >("ship_add_cargo_timer_reducer", &value.args)?
                .into())
            }
            "ship_energy_and_shield_timer_reducer" => Ok(__sdk::parse_reducer_args::<
                ship_energy_and_shield_timer_reducer_reducer::ShipEnergyAndShieldTimerReducerArgs,
            >(
                "ship_energy_and_shield_timer_reducer",
                &value.args,
            )?
            .into()),
            "ship_mining_timer_reducer" => {
                Ok(__sdk::parse_reducer_args::<
                    ship_mining_timer_reducer_reducer::ShipMiningTimerReducerArgs,
                >("ship_mining_timer_reducer", &value.args)?
                .into())
            }
            "try_server_only" => Ok(__sdk::parse_reducer_args::<
                try_server_only_reducer::TryServerOnlyArgs,
            >("try_server_only", &value.args)?
            .into()),
            "update_player_controller" => {
                Ok(__sdk::parse_reducer_args::<
                    update_player_controller_reducer::UpdatePlayerControllerArgs,
                >("update_player_controller", &value.args)?
                .into())
            }
            unknown => {
                Err(
                    __sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo")
                        .into(),
                )
            }
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    asteroid: __sdk::TableUpdate<Asteroid>,
    asteroid_sector: __sdk::TableUpdate<AsteroidSector>,
    asteroid_sector_upkeep_timer: __sdk::TableUpdate<AsteroidSectorUpkeepTimer>,
    cargo_crate: __sdk::TableUpdate<CargoCrate>,
    faction_chat_message: __sdk::TableUpdate<FactionChatMessage>,
    faction_definition: __sdk::TableUpdate<FactionDefinition>,
    global_chat_message: __sdk::TableUpdate<GlobalChatMessage>,
    global_config: __sdk::TableUpdate<GlobalConfig>,
    item_definition: __sdk::TableUpdate<ItemDefinition>,
    jump_gate: __sdk::TableUpdate<JumpGate>,
    player: __sdk::TableUpdate<Player>,
    player_controller: __sdk::TableUpdate<PlayerController>,
    player_controller_timer: __sdk::TableUpdate<PlayerControllerTimer>,
    player_faction_standing: __sdk::TableUpdate<PlayerFactionStanding>,
    player_windows_timer: __sdk::TableUpdate<PlayerWindowsTimer>,
    privileged_client: __sdk::TableUpdate<PrivilegedClient>,
    sector: __sdk::TableUpdate<Sector>,
    sector_chat_message: __sdk::TableUpdate<SectorChatMessage>,
    sector_upkeep_timer: __sdk::TableUpdate<SectorUpkeepTimer>,
    ship_add_cargo_timer: __sdk::TableUpdate<ShipAddCargoTimer>,
    ship_cargo_item: __sdk::TableUpdate<ShipCargoItem>,
    ship_energy_and_shield_timer: __sdk::TableUpdate<ShipEnergyAndShieldTimer>,
    ship_equipment_slot: __sdk::TableUpdate<ShipEquipmentSlot>,
    ship_instance: __sdk::TableUpdate<ShipInstance>,
    ship_mining_timer: __sdk::TableUpdate<ShipMiningTimer>,
    ship_object: __sdk::TableUpdate<ShipObject>,
    ship_type_definition: __sdk::TableUpdate<ShipTypeDefinition>,
    sobj_hi_res_transform: __sdk::TableUpdate<StellarObjectTransformHiRes>,
    sobj_internal_transform: __sdk::TableUpdate<StellarObjectTransformInternal>,
    sobj_low_res_transform: __sdk::TableUpdate<StellarObjectTransformLowRes>,
    sobj_player_window: __sdk::TableUpdate<StellarObjectPlayerWindow>,
    sobj_transform_timer: __sdk::TableUpdate<TransformsTimer>,
    sobj_turn_left_controller: __sdk::TableUpdate<StellarObjectControllerTurnLeft>,
    sobj_velocity: __sdk::TableUpdate<StellarObjectVelocity>,
    station: __sdk::TableUpdate<Station>,
    stellar_object: __sdk::TableUpdate<StellarObject>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "asteroid" => {
                    db_update.asteroid = asteroid_table::parse_table_update(table_update)?
                }
                "asteroid_sector" => {
                    db_update.asteroid_sector =
                        asteroid_sector_table::parse_table_update(table_update)?
                }
                "asteroid_sector_upkeep_timer" => {
                    db_update.asteroid_sector_upkeep_timer =
                        asteroid_sector_upkeep_timer_table::parse_table_update(table_update)?
                }
                "cargo_crate" => {
                    db_update.cargo_crate = cargo_crate_table::parse_table_update(table_update)?
                }
                "faction_chat_message" => {
                    db_update.faction_chat_message =
                        faction_chat_message_table::parse_table_update(table_update)?
                }
                "faction_definition" => {
                    db_update.faction_definition =
                        faction_definition_table::parse_table_update(table_update)?
                }
                "global_chat_message" => {
                    db_update.global_chat_message =
                        global_chat_message_table::parse_table_update(table_update)?
                }
                "global_config" => {
                    db_update.global_config = global_config_table::parse_table_update(table_update)?
                }
                "item_definition" => {
                    db_update.item_definition =
                        item_definition_table::parse_table_update(table_update)?
                }
                "jump_gate" => {
                    db_update.jump_gate = jump_gate_table::parse_table_update(table_update)?
                }
                "player" => db_update.player = player_table::parse_table_update(table_update)?,
                "player_controller" => {
                    db_update.player_controller =
                        player_controller_table::parse_table_update(table_update)?
                }
                "player_controller_timer" => {
                    db_update.player_controller_timer =
                        player_controller_timer_table::parse_table_update(table_update)?
                }
                "player_faction_standing" => {
                    db_update.player_faction_standing =
                        player_faction_standing_table::parse_table_update(table_update)?
                }
                "player_windows_timer" => {
                    db_update.player_windows_timer =
                        player_windows_timer_table::parse_table_update(table_update)?
                }
                "privileged_client" => {
                    db_update.privileged_client =
                        privileged_client_table::parse_table_update(table_update)?
                }
                "sector" => db_update.sector = sector_table::parse_table_update(table_update)?,
                "sector_chat_message" => {
                    db_update.sector_chat_message =
                        sector_chat_message_table::parse_table_update(table_update)?
                }
                "sector_upkeep_timer" => {
                    db_update.sector_upkeep_timer =
                        sector_upkeep_timer_table::parse_table_update(table_update)?
                }
                "ship_add_cargo_timer" => {
                    db_update.ship_add_cargo_timer =
                        ship_add_cargo_timer_table::parse_table_update(table_update)?
                }
                "ship_cargo_item" => {
                    db_update.ship_cargo_item =
                        ship_cargo_item_table::parse_table_update(table_update)?
                }
                "ship_energy_and_shield_timer" => {
                    db_update.ship_energy_and_shield_timer =
                        ship_energy_and_shield_timer_table::parse_table_update(table_update)?
                }
                "ship_equipment_slot" => {
                    db_update.ship_equipment_slot =
                        ship_equipment_slot_table::parse_table_update(table_update)?
                }
                "ship_instance" => {
                    db_update.ship_instance = ship_instance_table::parse_table_update(table_update)?
                }
                "ship_mining_timer" => {
                    db_update.ship_mining_timer =
                        ship_mining_timer_table::parse_table_update(table_update)?
                }
                "ship_object" => {
                    db_update.ship_object = ship_object_table::parse_table_update(table_update)?
                }
                "ship_type_definition" => {
                    db_update.ship_type_definition =
                        ship_type_definition_table::parse_table_update(table_update)?
                }
                "sobj_hi_res_transform" => {
                    db_update.sobj_hi_res_transform =
                        sobj_hi_res_transform_table::parse_table_update(table_update)?
                }
                "sobj_internal_transform" => {
                    db_update.sobj_internal_transform =
                        sobj_internal_transform_table::parse_table_update(table_update)?
                }
                "sobj_low_res_transform" => {
                    db_update.sobj_low_res_transform =
                        sobj_low_res_transform_table::parse_table_update(table_update)?
                }
                "sobj_player_window" => {
                    db_update.sobj_player_window =
                        sobj_player_window_table::parse_table_update(table_update)?
                }
                "sobj_transform_timer" => {
                    db_update.sobj_transform_timer =
                        sobj_transform_timer_table::parse_table_update(table_update)?
                }
                "sobj_turn_left_controller" => {
                    db_update.sobj_turn_left_controller =
                        sobj_turn_left_controller_table::parse_table_update(table_update)?
                }
                "sobj_velocity" => {
                    db_update.sobj_velocity = sobj_velocity_table::parse_table_update(table_update)?
                }
                "station" => db_update.station = station_table::parse_table_update(table_update)?,
                "stellar_object" => {
                    db_update.stellar_object =
                        stellar_object_table::parse_table_update(table_update)?
                }

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.asteroid = cache
            .apply_diff_to_table::<Asteroid>("asteroid", &self.asteroid)
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.asteroid_sector = cache
            .apply_diff_to_table::<AsteroidSector>("asteroid_sector", &self.asteroid_sector)
            .with_updates_by_pk(|row| &row.id);
        diff.asteroid_sector_upkeep_timer = cache
            .apply_diff_to_table::<AsteroidSectorUpkeepTimer>(
                "asteroid_sector_upkeep_timer",
                &self.asteroid_sector_upkeep_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.cargo_crate = cache
            .apply_diff_to_table::<CargoCrate>("cargo_crate", &self.cargo_crate)
            .with_updates_by_pk(|row| &row.id);
        diff.faction_chat_message = cache
            .apply_diff_to_table::<FactionChatMessage>(
                "faction_chat_message",
                &self.faction_chat_message,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.faction_definition = cache
            .apply_diff_to_table::<FactionDefinition>(
                "faction_definition",
                &self.faction_definition,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.global_chat_message = cache
            .apply_diff_to_table::<GlobalChatMessage>(
                "global_chat_message",
                &self.global_chat_message,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.global_config = cache
            .apply_diff_to_table::<GlobalConfig>("global_config", &self.global_config)
            .with_updates_by_pk(|row| &row.id);
        diff.item_definition = cache
            .apply_diff_to_table::<ItemDefinition>("item_definition", &self.item_definition)
            .with_updates_by_pk(|row| &row.id);
        diff.jump_gate = cache
            .apply_diff_to_table::<JumpGate>("jump_gate", &self.jump_gate)
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.player = cache
            .apply_diff_to_table::<Player>("player", &self.player)
            .with_updates_by_pk(|row| &row.identity);
        diff.player_controller = cache
            .apply_diff_to_table::<PlayerController>("player_controller", &self.player_controller)
            .with_updates_by_pk(|row| &row.identity);
        diff.player_controller_timer = cache
            .apply_diff_to_table::<PlayerControllerTimer>(
                "player_controller_timer",
                &self.player_controller_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.player_faction_standing = cache
            .apply_diff_to_table::<PlayerFactionStanding>(
                "player_faction_standing",
                &self.player_faction_standing,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.player_windows_timer = cache
            .apply_diff_to_table::<PlayerWindowsTimer>(
                "player_windows_timer",
                &self.player_windows_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.privileged_client = cache
            .apply_diff_to_table::<PrivilegedClient>("privileged_client", &self.privileged_client)
            .with_updates_by_pk(|row| &row.identity);
        diff.sector = cache
            .apply_diff_to_table::<Sector>("sector", &self.sector)
            .with_updates_by_pk(|row| &row.id);
        diff.sector_chat_message = cache
            .apply_diff_to_table::<SectorChatMessage>(
                "sector_chat_message",
                &self.sector_chat_message,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.sector_upkeep_timer = cache
            .apply_diff_to_table::<SectorUpkeepTimer>(
                "sector_upkeep_timer",
                &self.sector_upkeep_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.ship_add_cargo_timer = cache
            .apply_diff_to_table::<ShipAddCargoTimer>(
                "ship_add_cargo_timer",
                &self.ship_add_cargo_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.ship_cargo_item = cache
            .apply_diff_to_table::<ShipCargoItem>("ship_cargo_item", &self.ship_cargo_item)
            .with_updates_by_pk(|row| &row.id);
        diff.ship_energy_and_shield_timer = cache
            .apply_diff_to_table::<ShipEnergyAndShieldTimer>(
                "ship_energy_and_shield_timer",
                &self.ship_energy_and_shield_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.ship_equipment_slot = cache
            .apply_diff_to_table::<ShipEquipmentSlot>(
                "ship_equipment_slot",
                &self.ship_equipment_slot,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.ship_instance = cache
            .apply_diff_to_table::<ShipInstance>("ship_instance", &self.ship_instance)
            .with_updates_by_pk(|row| &row.id);
        diff.ship_mining_timer = cache
            .apply_diff_to_table::<ShipMiningTimer>("ship_mining_timer", &self.ship_mining_timer)
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.ship_object = cache
            .apply_diff_to_table::<ShipObject>("ship_object", &self.ship_object)
            .with_updates_by_pk(|row| &row.ship_id);
        diff.ship_type_definition = cache
            .apply_diff_to_table::<ShipTypeDefinition>(
                "ship_type_definition",
                &self.ship_type_definition,
            )
            .with_updates_by_pk(|row| &row.id);
        diff.sobj_hi_res_transform = cache
            .apply_diff_to_table::<StellarObjectTransformHiRes>(
                "sobj_hi_res_transform",
                &self.sobj_hi_res_transform,
            )
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.sobj_internal_transform = cache
            .apply_diff_to_table::<StellarObjectTransformInternal>(
                "sobj_internal_transform",
                &self.sobj_internal_transform,
            )
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.sobj_low_res_transform = cache
            .apply_diff_to_table::<StellarObjectTransformLowRes>(
                "sobj_low_res_transform",
                &self.sobj_low_res_transform,
            )
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.sobj_player_window = cache
            .apply_diff_to_table::<StellarObjectPlayerWindow>(
                "sobj_player_window",
                &self.sobj_player_window,
            )
            .with_updates_by_pk(|row| &row.identity);
        diff.sobj_transform_timer = cache
            .apply_diff_to_table::<TransformsTimer>(
                "sobj_transform_timer",
                &self.sobj_transform_timer,
            )
            .with_updates_by_pk(|row| &row.scheduled_id);
        diff.sobj_turn_left_controller = cache
            .apply_diff_to_table::<StellarObjectControllerTurnLeft>(
                "sobj_turn_left_controller",
                &self.sobj_turn_left_controller,
            )
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.sobj_velocity = cache
            .apply_diff_to_table::<StellarObjectVelocity>("sobj_velocity", &self.sobj_velocity)
            .with_updates_by_pk(|row| &row.sobj_id);
        diff.station = cache
            .apply_diff_to_table::<Station>("station", &self.station)
            .with_updates_by_pk(|row| &row.id);
        diff.stellar_object = cache
            .apply_diff_to_table::<StellarObject>("stellar_object", &self.stellar_object)
            .with_updates_by_pk(|row| &row.id);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    asteroid: __sdk::TableAppliedDiff<'r, Asteroid>,
    asteroid_sector: __sdk::TableAppliedDiff<'r, AsteroidSector>,
    asteroid_sector_upkeep_timer: __sdk::TableAppliedDiff<'r, AsteroidSectorUpkeepTimer>,
    cargo_crate: __sdk::TableAppliedDiff<'r, CargoCrate>,
    faction_chat_message: __sdk::TableAppliedDiff<'r, FactionChatMessage>,
    faction_definition: __sdk::TableAppliedDiff<'r, FactionDefinition>,
    global_chat_message: __sdk::TableAppliedDiff<'r, GlobalChatMessage>,
    global_config: __sdk::TableAppliedDiff<'r, GlobalConfig>,
    item_definition: __sdk::TableAppliedDiff<'r, ItemDefinition>,
    jump_gate: __sdk::TableAppliedDiff<'r, JumpGate>,
    player: __sdk::TableAppliedDiff<'r, Player>,
    player_controller: __sdk::TableAppliedDiff<'r, PlayerController>,
    player_controller_timer: __sdk::TableAppliedDiff<'r, PlayerControllerTimer>,
    player_faction_standing: __sdk::TableAppliedDiff<'r, PlayerFactionStanding>,
    player_windows_timer: __sdk::TableAppliedDiff<'r, PlayerWindowsTimer>,
    privileged_client: __sdk::TableAppliedDiff<'r, PrivilegedClient>,
    sector: __sdk::TableAppliedDiff<'r, Sector>,
    sector_chat_message: __sdk::TableAppliedDiff<'r, SectorChatMessage>,
    sector_upkeep_timer: __sdk::TableAppliedDiff<'r, SectorUpkeepTimer>,
    ship_add_cargo_timer: __sdk::TableAppliedDiff<'r, ShipAddCargoTimer>,
    ship_cargo_item: __sdk::TableAppliedDiff<'r, ShipCargoItem>,
    ship_energy_and_shield_timer: __sdk::TableAppliedDiff<'r, ShipEnergyAndShieldTimer>,
    ship_equipment_slot: __sdk::TableAppliedDiff<'r, ShipEquipmentSlot>,
    ship_instance: __sdk::TableAppliedDiff<'r, ShipInstance>,
    ship_mining_timer: __sdk::TableAppliedDiff<'r, ShipMiningTimer>,
    ship_object: __sdk::TableAppliedDiff<'r, ShipObject>,
    ship_type_definition: __sdk::TableAppliedDiff<'r, ShipTypeDefinition>,
    sobj_hi_res_transform: __sdk::TableAppliedDiff<'r, StellarObjectTransformHiRes>,
    sobj_internal_transform: __sdk::TableAppliedDiff<'r, StellarObjectTransformInternal>,
    sobj_low_res_transform: __sdk::TableAppliedDiff<'r, StellarObjectTransformLowRes>,
    sobj_player_window: __sdk::TableAppliedDiff<'r, StellarObjectPlayerWindow>,
    sobj_transform_timer: __sdk::TableAppliedDiff<'r, TransformsTimer>,
    sobj_turn_left_controller: __sdk::TableAppliedDiff<'r, StellarObjectControllerTurnLeft>,
    sobj_velocity: __sdk::TableAppliedDiff<'r, StellarObjectVelocity>,
    station: __sdk::TableAppliedDiff<'r, Station>,
    stellar_object: __sdk::TableAppliedDiff<'r, StellarObject>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<Asteroid>("asteroid", &self.asteroid, event);
        callbacks.invoke_table_row_callbacks::<AsteroidSector>(
            "asteroid_sector",
            &self.asteroid_sector,
            event,
        );
        callbacks.invoke_table_row_callbacks::<AsteroidSectorUpkeepTimer>(
            "asteroid_sector_upkeep_timer",
            &self.asteroid_sector_upkeep_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<CargoCrate>("cargo_crate", &self.cargo_crate, event);
        callbacks.invoke_table_row_callbacks::<FactionChatMessage>(
            "faction_chat_message",
            &self.faction_chat_message,
            event,
        );
        callbacks.invoke_table_row_callbacks::<FactionDefinition>(
            "faction_definition",
            &self.faction_definition,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GlobalChatMessage>(
            "global_chat_message",
            &self.global_chat_message,
            event,
        );
        callbacks.invoke_table_row_callbacks::<GlobalConfig>(
            "global_config",
            &self.global_config,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ItemDefinition>(
            "item_definition",
            &self.item_definition,
            event,
        );
        callbacks.invoke_table_row_callbacks::<JumpGate>("jump_gate", &self.jump_gate, event);
        callbacks.invoke_table_row_callbacks::<Player>("player", &self.player, event);
        callbacks.invoke_table_row_callbacks::<PlayerController>(
            "player_controller",
            &self.player_controller,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerControllerTimer>(
            "player_controller_timer",
            &self.player_controller_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerFactionStanding>(
            "player_faction_standing",
            &self.player_faction_standing,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PlayerWindowsTimer>(
            "player_windows_timer",
            &self.player_windows_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<PrivilegedClient>(
            "privileged_client",
            &self.privileged_client,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Sector>("sector", &self.sector, event);
        callbacks.invoke_table_row_callbacks::<SectorChatMessage>(
            "sector_chat_message",
            &self.sector_chat_message,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SectorUpkeepTimer>(
            "sector_upkeep_timer",
            &self.sector_upkeep_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipAddCargoTimer>(
            "ship_add_cargo_timer",
            &self.ship_add_cargo_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipCargoItem>(
            "ship_cargo_item",
            &self.ship_cargo_item,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipEnergyAndShieldTimer>(
            "ship_energy_and_shield_timer",
            &self.ship_energy_and_shield_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipEquipmentSlot>(
            "ship_equipment_slot",
            &self.ship_equipment_slot,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipInstance>(
            "ship_instance",
            &self.ship_instance,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipMiningTimer>(
            "ship_mining_timer",
            &self.ship_mining_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<ShipObject>("ship_object", &self.ship_object, event);
        callbacks.invoke_table_row_callbacks::<ShipTypeDefinition>(
            "ship_type_definition",
            &self.ship_type_definition,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectTransformHiRes>(
            "sobj_hi_res_transform",
            &self.sobj_hi_res_transform,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectTransformInternal>(
            "sobj_internal_transform",
            &self.sobj_internal_transform,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectTransformLowRes>(
            "sobj_low_res_transform",
            &self.sobj_low_res_transform,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectPlayerWindow>(
            "sobj_player_window",
            &self.sobj_player_window,
            event,
        );
        callbacks.invoke_table_row_callbacks::<TransformsTimer>(
            "sobj_transform_timer",
            &self.sobj_transform_timer,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectControllerTurnLeft>(
            "sobj_turn_left_controller",
            &self.sobj_turn_left_controller,
            event,
        );
        callbacks.invoke_table_row_callbacks::<StellarObjectVelocity>(
            "sobj_velocity",
            &self.sobj_velocity,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Station>("station", &self.station, event);
        callbacks.invoke_table_row_callbacks::<StellarObject>(
            "stellar_object",
            &self.stellar_object,
            event,
        );
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
    DbView = RemoteTables,
    Reducers = RemoteReducers,
    SetReducerFlags = SetReducerFlags,
    SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
>
{
}
impl<
        Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
    > RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        asteroid_table::register_table(client_cache);
        asteroid_sector_table::register_table(client_cache);
        asteroid_sector_upkeep_timer_table::register_table(client_cache);
        cargo_crate_table::register_table(client_cache);
        faction_chat_message_table::register_table(client_cache);
        faction_definition_table::register_table(client_cache);
        global_chat_message_table::register_table(client_cache);
        global_config_table::register_table(client_cache);
        item_definition_table::register_table(client_cache);
        jump_gate_table::register_table(client_cache);
        player_table::register_table(client_cache);
        player_controller_table::register_table(client_cache);
        player_controller_timer_table::register_table(client_cache);
        player_faction_standing_table::register_table(client_cache);
        player_windows_timer_table::register_table(client_cache);
        privileged_client_table::register_table(client_cache);
        sector_table::register_table(client_cache);
        sector_chat_message_table::register_table(client_cache);
        sector_upkeep_timer_table::register_table(client_cache);
        ship_add_cargo_timer_table::register_table(client_cache);
        ship_cargo_item_table::register_table(client_cache);
        ship_energy_and_shield_timer_table::register_table(client_cache);
        ship_equipment_slot_table::register_table(client_cache);
        ship_instance_table::register_table(client_cache);
        ship_mining_timer_table::register_table(client_cache);
        ship_object_table::register_table(client_cache);
        ship_type_definition_table::register_table(client_cache);
        sobj_hi_res_transform_table::register_table(client_cache);
        sobj_internal_transform_table::register_table(client_cache);
        sobj_low_res_transform_table::register_table(client_cache);
        sobj_player_window_table::register_table(client_cache);
        sobj_transform_timer_table::register_table(client_cache);
        sobj_turn_left_controller_table::register_table(client_cache);
        sobj_velocity_table::register_table(client_cache);
        station_table::register_table(client_cache);
        stellar_object_table::register_table(client_cache);
    }
}
