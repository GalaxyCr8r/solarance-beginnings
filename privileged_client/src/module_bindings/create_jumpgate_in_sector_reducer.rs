// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct CreateJumpgateInSectorArgs {
    pub sector_id: u64,
    pub x: f32,
    pub y: f32,
    pub target_sector_id: u64,
    pub t_x: f32,
    pub t_y: f32,
}

impl From<CreateJumpgateInSectorArgs> for super::Reducer {
    fn from(args: CreateJumpgateInSectorArgs) -> Self {
        Self::CreateJumpgateInSector {
            sector_id: args.sector_id,
            x: args.x,
            y: args.y,
            target_sector_id: args.target_sector_id,
            t_x: args.t_x,
            t_y: args.t_y,
        }
    }
}

impl __sdk::InModule for CreateJumpgateInSectorArgs {
    type Module = super::RemoteModule;
}

pub struct CreateJumpgateInSectorCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `create_jumpgate_in_sector`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait create_jumpgate_in_sector {
    /// Request that the remote module invoke the reducer `create_jumpgate_in_sector` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_create_jumpgate_in_sector`] callbacks.
    fn create_jumpgate_in_sector(
        &self,
        sector_id: u64,
        x: f32,
        y: f32,
        target_sector_id: u64,
        t_x: f32,
        t_y: f32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `create_jumpgate_in_sector`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`CreateJumpgateInSectorCallbackId`] can be passed to [`Self::remove_on_create_jumpgate_in_sector`]
    /// to cancel the callback.
    fn on_create_jumpgate_in_sector(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &u64, &f32, &f32, &u64, &f32, &f32)
            + Send
            + 'static,
    ) -> CreateJumpgateInSectorCallbackId;
    /// Cancel a callback previously registered by [`Self::on_create_jumpgate_in_sector`],
    /// causing it not to run in the future.
    fn remove_on_create_jumpgate_in_sector(&self, callback: CreateJumpgateInSectorCallbackId);
}

impl create_jumpgate_in_sector for super::RemoteReducers {
    fn create_jumpgate_in_sector(
        &self,
        sector_id: u64,
        x: f32,
        y: f32,
        target_sector_id: u64,
        t_x: f32,
        t_y: f32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "create_jumpgate_in_sector",
            CreateJumpgateInSectorArgs {
                sector_id,
                x,
                y,
                target_sector_id,
                t_x,
                t_y,
            },
        )
    }
    fn on_create_jumpgate_in_sector(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &u64, &f32, &f32, &u64, &f32, &f32)
            + Send
            + 'static,
    ) -> CreateJumpgateInSectorCallbackId {
        CreateJumpgateInSectorCallbackId(self.imp.on_reducer(
            "create_jumpgate_in_sector",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::CreateJumpgateInSector {
                                    sector_id,
                                    x,
                                    y,
                                    target_sector_id,
                                    t_x,
                                    t_y,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, sector_id, x, y, target_sector_id, t_x, t_y)
            }),
        ))
    }
    fn remove_on_create_jumpgate_in_sector(&self, callback: CreateJumpgateInSectorCallbackId) {
        self.imp
            .remove_on_reducer("create_jumpgate_in_sector", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `create_jumpgate_in_sector`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_create_jumpgate_in_sector {
    /// Set the call-reducer flags for the reducer `create_jumpgate_in_sector` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn create_jumpgate_in_sector(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_create_jumpgate_in_sector for super::SetReducerFlags {
    fn create_jumpgate_in_sector(&self, flags: __ws::CallReducerFlags) {
        self.imp
            .set_call_reducer_flags("create_jumpgate_in_sector", flags);
    }
}
